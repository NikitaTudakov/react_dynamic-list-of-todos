{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","select","handleChange","event","target","name","value","setState","this","props","todos","selectUser","filterTasks","filter","task","title","toLowerCase","includes","completed","className","type","placeholder","onChange","map","todo","classNames","key","id","checked","readOnly","onClick","userId","React","Component","apiUrl","getUser","fetch","then","response","json","user","data","CurrentUser","prevState","onReset","email","phone","PureComponent","App","selectedUserId","Reset","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f10248b.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n\n  state = {\n    query: '',\n    select: 'all',\n  };\n\n\n  handleChange = (event) => {\n    const {name, value} = event.target;\n\n    this.setState({ [name]: value });\n  };\n\n\n  render() {\n    const { query,select } = this.state;\n    const { todos, selectUser } = this.props;\n\n    const filterTasks = todos\n    .filter( task => {\n      if(query) {\n        return (\n          task.title !== null\n          && task.title.toLowerCase().includes(query.toLowerCase())\n        )\n      }\n      return task;\n    })\n\n    .filter(task => {\n      if( select === 'Active') {\n        return task.completed === false;\n      } else if ( select === 'Completed') {\n        return task.completed === true;\n      }\n      return task;\n    });\n\n    return(\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form>\n          <label>\n            Find\n            <input\n              type=\"text\"\n              name=\"query\"\n              placeholder=\"Find task\"\n              value={query}\n              onChange={this.handleChange}/>\n          </label>\n\n          <label>\n            Show\n            <select\n              name=\"select\"\n              value={select} \n              onChange={this.handleChange}\n            >\n              <option>All</option>\n              <option>Active</option>\n              <option>Completed</option>\n            </select>\n          </label>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filterTasks.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {'TodoList__item--unchecked' : !todo.completed },\n                  {'TodoList__item--checked' : todo.completed }\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n};\n\nTodoList.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    userId:PropTypes.number,\n  }))\n}\n","const apiUrl = 'https://mate-api.herokuapp.com';\n\nexport function getAllTodos() {\n  return fetch(`${apiUrl}/todos`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(userId) {\n  return fetch(`${apiUrl}/users/${userId}`)\n    .then(response => response.json())\n    .then(user => user.data);\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\nimport PropTypes from 'prop-types';\n\nexport class CurrentUser extends React.PureComponent {\n\n  state = {\n    user: {},\n    userId: 0,\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n    .then(user => this.setState({\n      user,\n      userId: user.id\n    }))\n  }\n\n  componentDidUpdate(prevState) {\n    if(prevState.userId !== this.props.userId){\n      getUser(this.props.userId)\n      .then(user => this.setState({\n        user,\n        userId: user.id\n      }))\n    }\n  }\n\n  render() {\n\n    const { user } = this.state;\n    const { onReset } = this.props\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>Selected user: {user.id}</span></h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button type=\"button\" onClick={onReset}>\n        Clear\n        </button>\n      </div>\n    )\n  };\n}\n\nCurrentUser.propTypes = {\n  onReset: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api.js';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then(todos => this.setState({\n        todos,\n      }))\n  }\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    })\n  }\n\n  Reset = () => {\n    this.setState({\n      selectedUserId: 0,\n    })\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList \n            todos={todos} \n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onReset={this.Reset} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}