{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","statusFilter","handleChange","event","target","name","value","setState","filterByQuery","task","title","toLowerCase","includes","filterByStatus","completed","this","props","todos","selectUser","filterTasks","filter","className","type","placeholder","onChange","map","todo","classNames","key","id","checked","readOnly","onClick","userId","React","Component","API_URL","getUser","fetch","then","response","json","user","data","CurrentUser","prevProps","onReset","email","phone","PureComponent","App","selectedUserId","RemoveUser","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4920b599.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    statusFilter: 'all',\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  };\n\n  filterByQuery = () => {\n    const { query } = this.state;\n\n    return (task) => {\n      if (query) {\n        return (\n          task.title !== null\n          && task.title.toLowerCase().includes(query.toLowerCase())\n        );\n      }\n\n      return task;\n    };\n  }\n\n  filterByStatus = () => {\n    const { statusFilter } = this.state;\n\n    return (task) => {\n      if (statusFilter === 'Active') {\n        return task.completed === false;\n      }\n\n      if (statusFilter === 'Completed') {\n        return task.completed === true;\n      }\n\n      return task;\n    };\n  }\n\n  render() {\n    const { query, statusFilter } = this.state;\n    const { todos, selectUser } = this.props;\n\n    const filterTasks = todos\n      .filter(this.filterByQuery())\n      .filter(this.filterByStatus());\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form>\n          <label>\n            Find\n            <input\n              type=\"text\"\n              name=\"query\"\n              placeholder=\"Find task\"\n              value={query}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label>\n            Show\n            <select\n              name=\"statusFilter\"\n              value={statusFilter}\n              onChange={this.handleChange}\n            >\n              <option>All</option>\n              <option>Active</option>\n              <option>Completed</option>\n            </select>\n          </label>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filterTasks.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n  })).isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nexport function getAllTodos() {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(userId) {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(user => user.data);\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then(user => this.setState({ user }));\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onReset } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button type=\"button\" onClick={onReset}>\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api.js';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then(todos => this.setState({ todos }));\n  }\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  RemoveUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onReset={this.RemoveUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}